<!DOCTYPE html>
<html lang="en">
<head>
     <!-- ZingChart CDN script -->
     <script src="https://cdn.zingchart.com/zingchart.min.js"></script>

     <style>
       #chart1 {
         height: 500px;
         width: 1500px;
         margin: 80px
       }
       #chart2 {
         height: 500px;
         width: 1500px;
         margin: 80px
       }
       #chart3 {
         height: 500px;
         width: 1800px;
         margin: 50px
       }
     </style>

</head>
<body class="container">

<header>

</header>

<main>
    <div class="jumbotron">
        <h1>Paulig Kulma Dashboard</h1>
    </div>
</main>


    <!-- chart container -->
    <div id="chart1"></div>
    <div id="chart2"></div>
    <div id="chart3"></div>

    <!-- fetches data from api/data page & renders chart from data returned -->
    <script>
      // creates variable for url we want to fetch
      const url = 'http://localhost:3000/hourlypurchased';
      const url2 = 'http://localhost:3000/covid';
      const url3 = 'http://localhost:3000/purchases';
     
      // get hourly purchased data
      fetch(url).then(res => {
          
          if (!res.ok) {
            // returns error with response text of error
            throw new Error(res.statusText);
          }
          
          return res.json();
        })
        // creates promise with returned data from previous promise
        .then(data => {

          let products = data;
          let productsInfo = [];

          products.forEach(item => {
            productsInfo.push([item.HOUR_OF_PURCHASE, item.PURCHASE_COUNT]);
          });
    
          const chart = {
            type: 'line',
            title: {
                        "text": "The hour of the most purchases"
                    },
            legend: {
                "toggle-action": "hide",
                item: {
                    "cursor": "pointer"
                    },
                "draggable": true,
                "drag-handler": "icon"
            },
            scaleX: {
            // set scale label
            label: {
                text: 'HOUR OF PURCHASE'
            },
            },
            scaleY: {
            // scale label with unicode character
            label: {
                text: 'PURCHASE COUNT'
            }
            },
            series: [
              {
                values: productsInfo,
                text: 'Purchase count of each hour',
              }
            ]
          };

          // renders zingchart to the page
          zingchart.render({
            id: 'chart2',
            data: chart,
            height: '100%',
            width: '100%'
          });
        })
        // catches errors in promise chain
        .catch(error => console.log('fetch error'));

///////////////////////////////////////////////////////////////////////////////

        // get the time series covid 19 sales data
        fetch(url2).then(res => {
          
          if (!res.ok) {
            // returns error with response text of error
            throw new Error(res.statusText);
          }
          
          return res.json();
        })
        // creates promise with returned data from previous promise
        .then(data => {

          let products = data;
          let days = [];
          let sales = [];
          let covid = [];

          products.forEach(item => {
            days.push(item.DATE);
            sales.push(item.SALES / 10);
            covid.push(item.COVID19_TOTAL_CASE);
          });
    
          const chart = {
            type: 'line',
            title: {
                        "text": "The Time Series Analysis of sales during COVID 19"
                    },
            legend: {
                "toggle-action": "hide",
                header: {
                    "text": "Covid 19 Analysis"
                        },
                item: {
                    "cursor": "pointer"
                    },
                "draggable": true,
                "drag-handler": "icon"
            },
            scaleX: {
            // set scale label
            label: {
                text: 'Days'
            },
         
                values: days,
               
            },
            scaleY: {
            // scale label with unicode character
            label: {
                text: 'Rate'
            }
            },
            series: [
              {
                values: sales,
                text: 'Sales numbers',
              },
              {
                values: covid,
                text: 'Covid 19 cases',
              }
            ]
          };

          // renders zingchart to the page
          zingchart.render({
            id: 'chart1',
            data: chart,
            height: '100%',
            width: '100%'
          });
        })
        // catches errors in promise chain
        .catch(error => console.log('fetch error'));

        //////////////////////////////////////////////////////////////

        // get the most 10 purchased products
        fetch(url3).then(res => {
          
          if (!res.ok) {
            // returns error with response text of error
            throw new Error(res.statusText);
          }
          
          return res.json();
        })
        // creates promise with returned data from previous promise
        .then(data => {

          let products = data;
          let productsInfo = [];

          products.forEach(item => {
            productsInfo.push([item.ITEM_NAME, item.ITEM_COUNT]);
          });
    
          const chart = {
            type: 'bar',
            title: {
                        "text": "The Top 10 Purchased Products"
                    },
            legend: {
                "toggle-action": "hide",
                item: {
                    "cursor": "pointer"
                    },
                "draggable": true,
                "drag-handler": "icon"
            },
            scaleX: {
            // set scale label
            label: {
                text: 'Product code'
            },
            },
            scaleY: {
            // scale label with unicode character
            label: {
                text: 'PURCHASEs'
            }
            },
            series: [
              {
                values: productsInfo,
                text: 'Product counts',
              }
            ]
          };

          // renders zingchart to the page
          zingchart.render({
            id: 'chart3',
            data: chart,
            height: '100%',
            width: '100%'
          });
        })
        // catches errors in promise chain
        .catch(error => console.log('fetch error'));
    </script>



</body>
</html>